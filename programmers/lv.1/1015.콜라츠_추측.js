/* 
콜라츠 추측

Description
1937년 Collatz란 사람에 의해 제기된 이 추측은, 
주어진 수가 1이 될 때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 
작업은 다음과 같습니다.

1-1. 입력된 수가 짝수라면 2로 나눕니다. 
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 
2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 
예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 
총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 
단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

제한 사항
입력된 수, num은 1 이상 8,000,000 미만인 정수입니다.

입출력 예
n	    result
6	    8
16	    4
626331	-1 
*/

// // 풀이 1
// const solution = (n) => {
//   let count = 0;
//   if (n === 1) return count;
//   while (count <= 500) {
//     !(n % 2) ? (n = n / 2) : (n = n * 3 + 1);
//     count++;
//     if (n === 1) return count;
//   }
//   return -1;
// };

// 풀이 2
// 재귀함수 사용
const solution = (num, count = 0) =>
  num === 1
    ? count >= 500
      ? -1
      : count
    : solution(!(num % 2) ? num / 2 : num * 3 + 1, ++count); // count++ 하면 틀림

/* 
후위 증가와 전위 증가

여기서 count 변수는 후위 증가 연산자 count++를 사용하고 있습니다. 
이 경우, count 변수의 현재 값은 해당 표현식이 평가되기 전의 값입니다. 
다시 말해, count의 현재 값이 함수에 인자로 전달되고 나서 1이 증가합니다.

예를 들어, solution(6)이 호출되면, 
count는 함수에 전달되기 전의 값인 0으로 사용되고, 함수 내에서 count는 1로 증가합니다.

반면에 전위 증가 연산자 ++count를 사용한다면, count는 함수에 전달되기 전에 1이 증가하게 됩니다.
*/
